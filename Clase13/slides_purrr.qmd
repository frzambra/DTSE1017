---
title: "R: {purrr}"
author: "Dr. Francisco Zambrano"
format: 
  revealjs:
    slide-number: true
    title-block-banner: true
    logo: "logo_hemera.jpg"
    footer: "DTSE1017|2-2022"
    theme: simple
    echo: true
---

```{r 'setup'}
#| include: false
library(palmerpenguins)
library(dplyr)
```
# `{purrr}`: Programación funcional en R {background-color="brown"}

## `{purrr}`: Programación funcional en R {.smaller .scrollable background-image="https://purrr.tidyverse.org/logo.png" background-position="97.5% 2.5%" background-size="7.5%" layout="true"}

**Un ejemplo con regresión lineal**

Modelo de regresión para estimar `Sepal.Length` utilizando como variable dependiente `Sepal.Width`

```{r}
model <- lm(Sepal.Length~Petal.Length,iris)
summary(model)
```

## `{purrr}`: Programación funcional en R {.smaller .scrollable background-image="https://purrr.tidyverse.org/logo.png" background-position="97.5% 2.5%" background-size="7.5%" layout="true"}

**Un ejemplo con regresión lineal**

```{r}
library(ggplot2)

ggplot(iris,aes(Petal.Length,Sepal.Length)) +
  geom_point() +
  geom_smooth(method = 'lm') +
  theme_bw() 
```

## `{purrr}`: Programación funcional en R {.smaller .scrollable background-image="https://purrr.tidyverse.org/logo.png" background-position="97.5% 2.5%" background-size="7.5%" layout="true"}

**Ahora, si queremos hacer la regresión por grupo de `Species`**

::: panel-tabset

## Filtrando por grupo

```{r}
sub1 <- iris[iris$Species == 'setosa',] #igual a filter(iris,Sepcies == 'setosa')
sub2 <- iris[iris$Species == 'virginica',] #igual a filter(iris,Sepcies == 'setosa')
sub3 <- iris[iris$Species == 'versicolor',] #igual a filter(iris,Sepcies == 'setosa')
m1 <- lm(Sepal.Length~Petal.Length,sub1)
m2 <- lm(Sepal.Length~Petal.Length,sub2)
m3 <- lm(Sepal.Length~Petal.Length,sub3)
m1
m2
m3
```
## for() loop

```{r}
sp <- unique(iris$Species)
models <- list()

for (i in sp){
  sub <- iris[iris$Species == sp,] #igual a filter(iris,Sepcies == 'setosa')

  models[[i]] <-  lm(Sepal.Length~Petal.Length,sub)
}
length(models)
models[[1]]

```

## lapply() con `nested_list`

Con listas por grupo 

```{r}
library(tidyr)
library(dplyr)
iris_nest <- iris |> 
  group_by(Species) |> 
  nest() 

iris_nest$data |> 
  lapply(\(x) lm(Sepal.Length~Petal.Length, data = x))
```

## lapply() con `dplyr`

Con listas por grupo 

```{r}
library(tidyr)
library(dplyr)
iris_lm <- iris |> 
  group_by(Species) |> 
  nest() |> 
  mutate(lm =lapply(data,\(x) lm(Sepal.Length~Petal.Length, data = x)))

iris_lm

iris_lm$lm[[1]]
```

:::

## `{purrr}`: Programación funcional en R {.smaller .scrollable background-image="https://purrr.tidyverse.org/logo.png" background-position="97.5% 2.5%" background-size="7.5%" layout="true"}

* `R`, en esencia, es un lenguaje de programación funcional (FP). Esto significa que proporciona muchas herramientas para la creación y manipulación de funciones.

* `{purrr}` facilita la programación funcional (FP) con objetos `data.frame` en R. 

* Conjunto completo y consistente de herramientas para trabajar con `funciones` y `vectores`.

* Una alternativa a `lapply` que facilita el trabajo con el entorno `{tidyverse}`.

* Problemas que se quieren resolver con `{purrr}`:

  - Hacer el código más claro
  - Hacer el código más seguro
  - Trabajar con listas y data.frames

## `{purrr}`: Programación funcional en R {background-image="https://purrr.tidyverse.org/logo.png" background-position="97.5% 2.5%" background-size="7.5%" layout="true"}

- Las funciones vectorizadas no funcionan con listas

```{r}
#| error: true
sum(rnorm(10))
sum(list(x = rnorm(10), y = rnorm(10), z = rnorm(10)))
```

## `{purrr}`: Programación funcional en R {.smaller .scrollable background-image="https://purrr.tidyverse.org/logo.png" background-position="97.5% 2.5%" background-size="7.5%" layout="true"}

* Siempre que quiera utilizar un `bucle-for` para resolver un problema iterativo, la familia de funciones `map_*()` le permite reformular su problema como un flujo pipe `{tidyverse}`.

* `purrr::map(.x,.f,...)`: toma como entrada `.x` y aplica `.f` a cada elemento de `.x`
  - `.x`: puede ser un vector, una lista o un data.frame
  - `.f`: es una función
  - devuelve como resultado una `list`
  
## `{purrr}`: Programación funcional en R {.smaller .scrollable background-image="https://purrr.tidyverse.org/logo.png" background-position="97.5% 2.5%" background-size="7.5%" layout="true"}

**Un ejemplo**

```{r}
library(purrr)
x_list <- list(x = rnorm(10), y = rnorm(10), z = rnorm(10))
map(x_list, mean)
```  

## `{purrr}`: Programación funcional en R {.smaller .scrollable background-image="https://purrr.tidyverse.org/logo.png" background-position="97.5% 2.5%" background-size="7.5%" layout="true"}

```{r, echo=F, out.width='60%', fig.align='center'}
knitr::include_graphics("https://upload.wikimedia.org/wikipedia/commons/0/06/Mapping-steps-loillibe-new.gif")
```

## `{purrr}`: Programación funcional en R {.smaller .scrollable background-image="https://purrr.tidyverse.org/logo.png" background-position="97.5% 2.5%" background-size="7.5%" layout="true"}

```{r, echo=F, out.width='60%', fig.align='center'}
knitr::include_graphics("../img/purr_x_input.png")
```

## `{purrr}`: Programación funcional en R {background-image="https://purrr.tidyverse.org/logo.png" background-position="97.5% 2.5%" background-size="7.5%" layout="true"}

**`map` en un `data.frame`**

::: panel-tabset

## `purrr`
```{r}
iris |> 
  select(where(is.numeric)) |> 
  map(mean)
```

## `apply`

```{r}
iris |> 
select(is.numeric) |> 
apply(2,mean)
```

## `dplyr`

```{r}
iris |> 
  summarise(across(where(is.numeric),mean))
```

:::

## `{purrr}`: Programación funcional en R {background-image="https://purrr.tidyverse.org/logo.png" background-position="97.5% 2.5%" background-size="7.5%" layout="true"}

### >Si copia y pega su código tres veces, es hora de escribir una función

## `{purrr}`: Programación funcional en R {.smaller .scrollable background-image="https://purrr.tidyverse.org/logo.png" background-position="97.5% 2.5%" background-size="7.5%" layout="true"}

Tres maneras de pasar funciones a `map`

1. pasarla directamente a `map` como función nombrada
2. usar una función anónima  
3. usar ~

::: panel-tabset

## 1. directamente

```{r}
iris |>
  select(where(is.numeric)) |> 
  map(.f = mean)
```

## 2. función anónima 1

```{r}
iris |>
  select(where(is.numeric)) |> 
  map(.f = \(x) mean(x))
```

## 3. función anónima 2

```{r}
iris |>
  select(where(is.numeric)) |> 
  map(.f = ~mean(.x))
```

:::

## `{purrr}`: Programación funcional en R {.smaller .scrollable background-image="https://purrr.tidyverse.org/logo.png" background-position="97.5% 2.5%" background-size="7.5%" layout="true"}

**Retomando el ejemplo de las regresiones con `iris`**

::: panel-tabset

## Opción 1: respuesta lista

```{r}
iris_nest <- iris |> 
  group_by(Species) |> 
  nest()

iris_nest$data |> 
  map(.f = \(x) lm(Sepal.Length~Petal.Length,x))
```

## Opción 2: respuesta lista anidada

```{r}
iris_lms <- iris |> 
  group_by(Species) |> 
  nest() |> 
  mutate(lms= map(.x = data,.f = \(x) lm(Sepal.Length~Petal.Length,x)))
iris_lms
```

## Opción 3: respuesta lista anidada 2

```{r}
iris_lms <- iris |> 
  group_by(Species) |> 
  nest() |> 
  mutate(lms= map(.x = data,.f = ~lm(Sepal.Length~Petal.Length,.x)))

iris_lms
```
:::


## `{purrr}`: Programación funcional en R {.smaller .scrollable background-image="https://purrr.tidyverse.org/logo.png" background-position="97.5% 2.5%" background-size="7.5%" layout="true"}

**Cuatro tipo de funciones `map_*()`:**  

- `map(.x, .f, ...)` toma como input `.x` y aplica `.f` a cada elemento de `.x`.  
- `map2(.x, .y, .f, ...)` toma como inputs `.x` e `.y` y aplica `.f` a  `.x` e `.y` en paralelo.  
- `pmap(.l, .f, ...)` toma una lista `.l` de inputs y aplica `.f` a cada elemtno de `.l` en paralelo  
- `group_map(.data, .f, ...)` toma un `tibble` agrupado y aplica `.f` a cada sub-grupo.


Por defecto `map()` devuelve una lista. Si quieres cambiar el tipo de objeto de respuesta se puede utilizar:

- `map_lgl()` devuelve un vector lógico,
- `map_chr()` devuelve un vector de carácter,
- `map_int()` devuleve un vector entero,
- `map_dbl()` devuleve un vector tipo double,
- `map_df()` devuelce un data.frame.
