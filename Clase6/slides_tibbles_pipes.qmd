---
title: "R: Tibbles y pipes"
author: "Dr. Francisco Zambrano"
format: 
  revealjs:
    slide-number: true
    #title-slide-attributes: 
      #data-background-image: "https://media.giphy.com/media/GldXiKXeO7hpczEHxt/giphy.gif"
      #data-background-size: "contain"
    title-block-banner: true
    logo: "logo_hemera.jpg"
    footer: "DTSE1017|2-2022"
    theme: simple
    echo: true
---

# Tibble: <br> Data frames mejorados {background-color="darkgreen"}

## Tibbles {background-image="https://raw.githubusercontent.com/tidyverse/tibble/master/man/figures/logo.png" background-position="97.5% 2.5%" background-size="7.5%" layout="true"}

`tibble` proporciona un `data frame` mejorado de clase `tbl_df`, el llamado `tibble`.

-   Tipo de objeto diseñado para trabajar con datos tidy (ordenados/ajustados) y tidyverse

-   Tiene diferencias con el `data.frame` en la visualización e indexación

-   Los `tibbles` no aceptan nombre de filas (rownames)

## tibble vs data.frame

-   Impresión/visualizacion de los datos (`print`):
    -   el `data frame` tratá de mostrar 1000 filas y todas las columnas
    -   el `tibble` muestra 10 observaciones y las columnas que caben en pantalla
    -   el `tibble` despliega información sobre el tipo de dato de cada variable (columna)

```{r}
# ver ayuda método print para objeto data.frame
?print.data.frame

# ver ayuda método print para objeto tbl_df
library(tibble)
?print.tbl_df
```

## `tibble` vs `data.frame` {.smaller}

-   Impresión/visualizacion de los datos (`print`):

```{r}
library(tibble)
library(palmerpenguins)
penguins |> data.frame()
```

## `tibble` vs `data.frame` {.smaller}

-   Impresión/visualizacion de los datos (`print`):

```{r}
penguins
```

## Tibbles {background-image="https://raw.githubusercontent.com/tidyverse/tibble/master/man/figures/logo.png" background-position="97.5% 2.5%" background-size="7.5%" layout="true"}

Un `tibble` se puede crear de cuatro maneras diferentes.

::: panel-tabset
## tibble()

Crea un `tibble` desde columnas de vectores con `tibble()`.

```{r}
tibble(
  x = c("a", "b"),
  y = c(1, 2),
  z = c(T, F)
)
```

## tribble()

Crea un `tibble` *traspuesto* fila por fila con `tribble()`.

```{r}
tribble(
  ~x, ~y,  ~z,
  "a", 1,  T,
  "b", 2,  F
)
```

## as_tibble()

Crea un `tibble` desde un `data.frame` existente con `as_tibble()`.

```{r}
data.frame(
  x = c("a", "b"),
  y = c(1, 2),
  z = c(T, F)
) |>  as_tibble()
```

## enframe()

Crea un `tibble` desde vectores con nombres `enframe()`.

```{r}
c(x = "a", y = "b", z = 1) |> 
  enframe(name = "x", value = "y")
```
:::

## Con los `pinguinos` {.smaller}

::: panel-tabset
## data.frame

```{r}
data.frame(penguins)
```

## tibble() (Opción 1)

```{r}
penguins
```

## tibble() (Opción 2)\]

```{r}
penguins |> glimpse()
```
:::

## `tibble` {.smaller}

-   {tibble} permite tener nombre de columnas que no son validos como nombres de objetos.

-   pueden tener espacios o contener carácteres especiales.

Por ejemplo

::: panel-tabset
## Carácteres especiales

```{r}
tb <- tibble(
      `1` = 1:5,
     ` ` = 5:1,
     `país` = round(rnorm(5)))
tb 
```

## Incluso emojis

\``{r} library(emo) paises <- c(emo::ji('chile'),emo::ji('argentina'),emo::ji('brazil')) names(tb) <- paises tb`
:::

## `tibble:` Indexación

**Indexación:** Extraer datos de un `tibble` (`[]`) siempre devuelve otro `tibble` y nunca un vector (a diferencia de los objetos `data.frame` estándar).

::: panel-tabset
## data.frame()

```{r}
data.frame(penguins)[,"species"]  |>  class()
```

## tibble()

```{r}
penguins[,"species"] |>  class()
```
:::

## `tibble`: indexación

`Coincidencia parcial:` la indexación de un tibble no permite la coincidencia parcial, es decir, siempre debe proporcionar el nombre completo de la columna.

::: panel-tabset
## data.frame()

```{r}
data.frame(penguins)$spec
```

## tibble()

```{r}
#| warning: true
penguins$spec
```
:::

# Pipes: <br> R-base: \|\> <br> {magrittr}: %\>% {background-color="darkblue"}

## Conceptos sobre los pipes

-   El pipe de `{magrittr}` fue introducido alrededor del 2014 y ha sido ampliamente utilizado.

-   Un esfuerzo conjunto entre R-core, el equipo de `{tidyverse}` y otros; han desarrollado un pipe `|>` para R base, el que está disponible desde R 4.1.0 en 2021.

## Conceptos sobre los pipes

### ¿Por qué utilizar los pipes?

Los operadores pipes proporcionan una alternativa a la llamada de funciones

Un ejemplo simple

```{r}
#| eval: false
h(g(f(x)))
```

Muchos encontramos este tipo de funciones anidadas difícil de leer.

-   El orden en como se llama la función `f`, luego, `g`, luego, `h`.

-   Es a la inversa de como aparece el código

El codigo tiene que leerse desde dentro hacia afuera.

## Conceptos sobre los pipes

Usando el operador pipe para la expresión

```{r}
#| eval: false
h(g(f(x)))
```

Se puede escribir como:

```{r}
#| eval: false
x |> f() |> g() |> h()
```

Evaluando la expresión, el resultado LHS

```{r}
#| eval: false
x |> f() 
```

es implicitamente insertado como el primer argumento en RHS y evaluado como

```{r}
#| eval: false
f(x)
```

## Conceptos sobre los pipes

Una definición simplificada de los pipes

```{r}
#| eval: false

`|>` = function(LHS,RHS) RHS(LHS)

x |> f = f(x)

x |> f() |> g() = g(f(x))

x |> f() |> g() |> h() = h(g(f(x)))

```

## Conceptos sobre los pipes

Con un ejemplo

```{r}
penguins[-c(2,7)] |> 
  subset(species == 'Adelie') |>
  subset(select = -species) |> 
  apply(2,mean,na.rm = TRUE)
```

## Conceptos sobre los pipes

En formato de funciones anidadas esto sería:

```{r}
apply(subset(subset(penguins[-c(2,7)],species == 'Adelie'),select = -species),2,mean,na.rm = TRUE)
```

## Conceptos sobre los pipes

Otra forma de reducir el uso de funciones anidadas es con objetos temporales

```{r}
temp1 <- subset(penguins[-c(2,7)],species == 'Adelie')
temp2 <- subset(temp1, select = -species) 
apply(temp2, 2,mean,na.rm = TRUE)
```

Es una opción, pero:

-   el código luce más desordenado
-   es realmente difícl encontrar buenos nombres para variables temporales
-   usar nombres generico como `tmp` puede ser contraproducente

## `{magrittr}:` el operador pipe {background-image="https://raw.githubusercontent.com/tidyverse/magrittr/master/man/figures/logo.png" background-position="95% 5%" background-size="7.5%" layout="true"}

`magrittr` viene con varios operadores:

-   **Operador Pipe:** `%>%`<br><br>
-   **Operador de asignación:** `%<>%`<br><br>
-   **Operador "Tee":** `%T>%`<br><br>
-   **Operador de exposición:** `%$%`

## `{magrittr}:` el operador pipe {background-image="https://raw.githubusercontent.com/tidyverse/magrittr/master/man/figures/logo.png" background-position="95% 5%" background-size="7.5%" layout="true"}

Esencialmente, estos operadores tienen como objetivo mejorar la legibilidad de su código de varias maneras:

::: incremental
-   organice las operaciones en una tubería fácilmente legible de comandos encadenados (de izquierda a derecha),
-   evitar llamadas a funciones anidadas (de adentro hacia afuera),
-   minimizar el uso de asignaciones de variables locales (\<-) y definiciones de funciones, y
-   elimine fácilmente pasos en su tubería sin romper el código.
:::

## 4.1 `magrittr`: el operador pipe

**Pipe básico:** enviar un valor u objeto (LHS) a la siguiente llamada de función (RHS) al **primer** argumento

```{r, eval=F}
library(magrittr)
x %>% f                            # equivalente a: f(x)
x %>% f(y)                         # equivalente a: f(x, y)
x %>% f %>% g %>% h                # equivalente a: h(g(f(x)))
```

## `magrittr`: el operador pipe

**Pipe con marcador de posición:** enviar un valor u objeto (LHS) a la siguiente llamada de función (RHS) a **cualquier** argumento

```{r, eval=F}
x %>% f(.)                         # equivalente a: x %>% f
x %>% f(y, .)                      # equivalente a: f(y, x)
x %>% f(y, z = .)                  # equivalente a: f(y, z = x)
x %>% f(y = nrow(.), z = ncol(.))  # equivalente a: f(x, y = nrow(x), z = ncol(x))
```

## `magrittr`: el operador pipe

**Creando funciones y pipelines:** una secuencia de código que comienza con el marcador de posición (`.`) devuelve una función que se puede usar para aplicar posteriormente la canalización a valores concretos

```{r, eval=F}
f <- . %>% cos %>% sin             # equivalente a: f <- function(.) sin(cos(.))
f(20)                              # equivalente a: el pipeline 20 %>% cos %>% sin
```

[^1]

[^1]: *Nota: Encuentre más información sobre `%>%` corriendo en R `vignette("magrittr")`. Tipear `%>%` usando el atajo: Ctrl + Shift + M.*

## `magrittr`: el operador pipe

**Pregunta:** ¿¿Cuál es la masa corporal promedio en gramos de todos los pingüinos observados en el año 2007 (después de excluir los valores faltantes)?

**Sin pipes:**

```{r, eval=F}
mean(subset(penguins, year == 2007)$body_mass_g, na.rm = T)

# tambi+en:
peng_bm_2007 <- subset(penguins, year == 2007)$body_mass_g
mean(peng_bm_2007, na.rm = T)
```

## `magrittr`: el operador pipe

::: columns
::: {.column width="50%"}
**En un mundo con pipes:**

```{r, eval=F}
penguins %>% 
  subset(year == 2007) %>% 
  .$body_mass_g %>% 
  mean(na.rm = T)
```
:::

::: {.column width="50%"}
-   ¡El estilo secuencial mejora la legibilidad!
-   ¡Menor complejidad que descifrar funciones anidadas!
-   ¡No es necesario almacenar resultados intermedios!
-   ¡Modificación modular paso-a-paso de pipes!
:::
:::

[^2]

[^2]: *Nota: A partir de la versión `4.1.0`, `R` base viene con un operador pipe nativo (`|>`).*

## `magrittr`: el operador pipe {.smaller}

**Pipes avanzados:** Utilice los operadores de tuberías más avanzados para agilizar aún más su flujo de trabajo.

::: panel-tabset
## Tee Pipe

`%T>%` se puede utilizar para activar el efecto secundario de una función, por ejemplo, para trazar o imprimir resultados

```{r}
penguins[1:5, c("island", "bill_length_mm")] %T>% print %>% .$bill_length_mm %>% mean(na.rm=T)
```

## Pipe de exposición

`%$%` expone los nombres en el objeto LHS a la expresión RHS. Esto es útil si la expresión RHS no permite un argumento `data` separado.

```{r, fig.width=6, fig.asp=0.618, fig.retina=3}
library(magrittr)
penguins %$% plot(species, bill_length_mm)  # equivalente a: plot(penguins$species, penguins$bill_length_mm)
```

## Pipe de asignación

`%<>%` se puede utilizar de forma equivalente al operador de asignación base `R` (`<-`). Reasigna el resultado del pipeline a la variable inicial.

```{r}
var <- penguins$bill_length_mm

var %<>% mean(na.rm=T)

var
```
:::

## ¿Por qué un pipe base?

El pipe de `{magrittr}` ha sido muy exitoso.

Sin embargo, tiene algunos problemas:

-   rastrear errores puede ser mas complejo de lo que uno esperaría

-   hay mayor sobrecarga computacional que puede ser significativa

-   hay un número de características que son raramente usadas y que agregan complejidad a la mantención.

## ¿Por qué un pipe base?

Ahora que el concepto está bien fundado, fue rasonable incorporarlo a R base.

-   permite crear código sin la dependencia de un paquete que contenga la función del operador.

-   la idea principal de agregar un pipe a R base fue en primer lugar propuesta por varios miembros del equipo de `{tidyverse}`

-   el resultado a la fecha ha sido un esfuerzo colaborativo entre los equipo de `{tidyverse}`, R core y varios miembros de la comunidad R, en particular Duncan Murdoch.

## Pasar como primer argumento al pipe `%>%` {.smaller}

-   {magrittr}: %\>%
    -   utiliza el punto (.)
    -   en un principio era necesario de utilizar siempre
    -   ahora solo se utiliza cuando no va como primer argumento

::: panel-tabset
## Antes

```{r}
penguins %>% 
  subset(x = ., species == 'Adelie') %>%
  print(n=3)

penguins %>% 
  subset(., species == 'Adelie') %>%
  print(n=3)
```

## Ahora

```{r}
penguins %>% 
  subset(species == 'Adelie')
```
:::

## Pasar como primer argumento al pipe `|>` {.smaller}

-   En la versión 4.1.0 de R base: \|\>

Funciona bien asignando al primer argumento de la función `RHS`

```{r}
penguins |> 
  subset(species == 'Adelie') |> 
  subset(select = -c(1,2,7)) |> 
  apply(2, mean, na.rm = TRUE)
```

## Otros argumentos a los pipes `|>` {.smaller}

::: panel-tabset
## {magrittr} \`%\>%

El punto usado por `{magrittr}` puede no ser facilmente visible

```{r}
penguins %>% 
  subset(species == 'Adelie') %>%
  lm(bill_length_mm~flipper_length_mm, data = .)
```

## R 4.1.0 `|>`

-   En la versión 4.1.0 de R base: \|\>

-   Implicitamente solo admite como primer argumento

-   Para otros argumentos se debe realizar:

```{r}
penguins |> 
  subset(species == 'Adelie') |> 
  (\(d) lm(bill_length_mm~flipper_length_mm, data = d))()
```

## R 4.2.0 `|>`

-   En la versión 4.2.0 de R base: \|\>

-   Se introduce el marcador de posición (placeholder) como un guion bajo `_`

-   El `placeholder` debe ser pasado a la función como argumento nombrado (ej, `arg = _`)

-   No admite -aún- la sintaxis de extracción estandar.

```{r}
penguins |> 
  subset(species == 'Adelie') |> 
  lm(bill_length_mm~flipper_length_mm, data =_)
```

```{r}
#| error: true
penguins |> 
  subset(species == 'Adelie') |> 
  lm(bill_length_mm~flipper_length_mm, data =_) |> 
  _$coef

```
:::
